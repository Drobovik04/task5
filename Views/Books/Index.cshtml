@model Settings
@{
    ViewData["Title"] = "Bookstore Tester";
}

<h2>Bookstore Tester</h2>

<div class="container">
    <div class="d-flex flex-wrap align-items-center justify-content-between mb-4" id="settings-form">
        <div class="form-group me-3">
            <label for="language" class="form-label text-muted small">Language</label>
            <select id="language" name="Language" class="form-select">
                <option value="en">English (USA)</option>
                <option value="de">German (Germany)</option>
                <option value="fr">French (France)</option>
            </select>
        </div>

        <div class="form-group me-3">
            <label for="seed" class="form-label text-muted small">Seed</label>
            <div class="input-group">
                <input type="number" id="seed" name="Seed" class="form-control" value="@Model.Seed">
                <button id="random-seed-btn" class="btn btn-outline-secondary" type="button">
                    🔀
                </button>
            </div>
        </div>

        <div class="form-group me-3">
            <label for="likes" class="form-label text-muted small">Average Likes</label>
            <input type="range" id="likes" name="AvgLikes" class="form-range" min="0" max="10" step="0.1" value="@Model.AvgLikes">
            <div class="d-flex justify-content-between small text-muted mt-1">
                <span>0</span>
                <span>2</span>
                <span>4</span>
                <span>6</span>
                <span>8</span>
                <span>10</span>
            </div>
        </div>

        <div class="form-group me-3">
            <label for="reviews" class="form-label text-muted small">Average Reviews</label>
            <input type="number" id="reviews" name="AvgReviews" class="form-control" value="@Model.AvgReviews">
        </div>
        <div class="form-group me-3">
            <button class="btn btn-primary" id="export-csv">CSV</button>
        </div>
    </div>
</div>
<table class="table table-striped table-hover" style="table-layout: fixed" id="books-table">
    <thead>
        <tr>
            <th style="width: 5%">#</th>
            <th style="width: 10%">ISBN</th>
            <th style="width: 25%">Title</th>
            <th style="width: 10%">Author</th>
            <th style="width: 10%">Publisher</th>
            <th style="width: 5%"></th>
        </tr>
    </thead>
    <tbody>

    </tbody>
</table>

<script>
    let batch = 0;
    let isLoading = false;

    function loadBooks() {
        if (isLoading) {
            return;
        }

        isLoading = true;
        const settings = {
            Language: document.getElementById('language').value,
            Seed: parseInt(document.getElementById('seed').value),
            AvgLikes: parseFloat(document.getElementById('likes').value),
            AvgReviews: parseFloat(document.getElementById('reviews').value)
        };
        fetch(`/Books/GenerateBooks?batch=${batch}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(settings)
        })
            .then(response => response.json())
            .then(data => {
                const tableBody = document.querySelector('#books-table tbody');
                data.forEach(book => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${book.index}</td>
                        <td>${book.isbn}</td>
                        <td>${book.title}</td>
                        <td>${book.author}</td>
                        <td>${book.publisher}</td>
                        <td><button class="btn btn-primary btn-sm toggle-details" data-index="${book.index}">Show</button></td>
                    `;
                    tableBody.appendChild(row);

                    const detailRow = document.createElement('tr');
                    detailRow.classList.add('book-details');
                    detailRow.setAttribute('parent-index', `${book.index}`);
                    detailRow.style.display = 'none';
                    detailRow.innerHTML = `
                        <td colspan="5">
                            <div class="row g-3">
                                <div class="col-md-3 text-center">
                                    <img src="${book.coverImage}" class="img-fluid rounded">
                                    <div class="mt-2 text-muted">
                                        <i class="fa-solid fa-thumbs-up"></i> ${book.likes}
                                    </div>
                                </div>
                                <div class="col-md-9">
                                    <div class="list-group">
                                        ${book.reviewDetails.map(r => `<div class="list-group-item"><p class="mb-1">${r.reviewText}</p> <small class="text-muted">${r.reviewer} </small></div>`).join('')}
                                    </div>
                                </div>
                            </div>

                        </td>
                    `;
                    tableBody.appendChild(detailRow);
                });
            })
            .finally(() => {
                isLoading = false;
            });

        batch++;
    }

    window.addEventListener('scroll', () => {
        if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight) {
            loadBooks();
        }
    });

    document.getElementById('settings-form').addEventListener('change', () => {
        document.querySelector('#books-table tbody').innerHTML = '';
        batch = 0;
        loadBooks();
    });

    document.getElementById('books-table').addEventListener('click', function (event) {
        const button = event.target;
        if (button.classList.contains('toggle-details')) {
            const index = button.dataset.index;
            const detailRow = document.querySelector(`.book-details[parent-index="${index}"]`);
            if (detailRow.style.display === 'none') {
                detailRow.style.display = '';
                button.textContent = 'Hide';
            } else {
                detailRow.style.display = 'none';
                button.textContent = 'Show';
            }
        }
    });

    document.getElementById('random-seed-btn').addEventListener('click', function () {
        const randomSeed = Math.floor(Math.random() * 100000);
        document.getElementById('seed').value = randomSeed;
        document.querySelector('#books-table tbody').innerHTML = '';
        batch = 0;
        loadBooks();
    });

    document.getElementById('export-csv').addEventListener('click', function () {
        const settings = {
            Language: document.getElementById('language').value,
            Seed: parseInt(document.getElementById('seed').value),
            AvgLikes: parseFloat(document.getElementById('likes').value),
            AvgReviews: parseFloat(document.getElementById('reviews').value)
        };

        fetch(`/Books/ExportToCsv?totalbatches=${batch}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(settings)
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to export CSV');
                }
                return response.blob();
            })
            .then(blob => {
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.style.display = 'none';
                a.href = url;
                a.download = 'books.csv';
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
            })
            .catch(error => console.error('Error exporting CSV:', error));
    });
    loadBooks();
</script>