@model Settings
@{
    ViewData["Title"] = "Bookstore Tester";
}

<h2>Bookstore Tester</h2>

<div class="d-flex flex-row justify-content-between">
    <form id="settings-form">
        <label for="language">Language:</label>
        <select id="language" name="Language">
            <option value="en">English (USA)</option>
            <option value="de">German (Germany)</option>
            <option value="fr">French (France)</option>
        </select>

        <label for="seed">Seed:</label>
        <input class="form-control" type="number" id="seed" name="Seed" value="@Model.Seed">

        <label for="likes">Average Likes:</label>
        <input class="form-control" type="range" id="likes" name="AvgLikes" min="0" max="10" step="0.1" value="@Model.AvgLikes">

        <label for="reviews">Average Reviews:</label>
        <input class="form-control" type="number" id="reviews" name="AvgReviews" value="@Model.AvgReviews">
    </form>
</div>
<table class="table table-striped table-hover" id="books-table">
    <thead>
        <tr>
            <th>#</th>
            <th>ISBN</th>
            <th>Title</th>
            <th>Author</th>
            <th>Publisher</th>
        </tr>
    </thead>
    <tbody>

    </tbody>
</table>

<script>
    let batch = 0;
    let isLoading = false;

    function loadBooks() {
        if (isLoading) {
            return;
        }

        isLoading = true;
        const settings = {
            Language: document.getElementById('language').value,
            Seed: parseInt(document.getElementById('seed').value),
            AvgLikes: parseFloat(document.getElementById('likes').value),
            AvgReviews: parseFloat(document.getElementById('reviews').value)
        };
        fetch(`/Books/GenerateBooks?batch=${batch}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(settings)
        })
            .then(response => response.json())
            .then(data => {
                const tableBody = document.querySelector('#books-table tbody');
                console.log(data);
                data.forEach(book => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${book.index}</td>
                        <td>${book.isbn}</td>
                        <td>${book.title}</td>
                        <td>${book.author}</td>
                        <td>${book.publisher}</td>
                        <td><button class="btn btn-primary btn-sm toggle-details" data-index="${book.index}">Show</button></td>
                    `;
                    tableBody.appendChild(row);

                    const detailRow = document.createElement('tr');
                    detailRow.classList.add('book-details');
                    detailRow.setAttribute('parent-index', `${book.index}`);
                    detailRow.style.display = 'none';
                    detailRow.innerHTML = `
                        <td colspan="6">
                            <div class="card">
                                <div class="row">
                                    <div class="col-md-3">
                                        <img src="${book.coverImage}" class="img-fluid rounded">
                                    </div>
                                    <div class="col-md-9">
                                        <h5>Rating: ${book.likes} ⭐</h5>
                                        <h6>Reviews:</h6>
                                        <div>${book.reviewDetails.map(r => `${r.reviewText}: ${r.reviewer}`).join('')}</div>
                                    </div>
                                </div>
                            </div>
                        </td>
                    `;
                    tableBody.appendChild(detailRow);
                });
                // document.querySelectorAll('.toggle-details').forEach(button => {
                //     button.addEventListener('click', function () {
                //         const index = this.dataset.index;
                //         const detailRow = document.querySelector(`.book-details[parent-index = "${index}"]`);
                //         if (detailRow.style.display === 'none') {
                //             detailRow.style.display = '';
                //             this.textContent = 'Hide';
                //         } else {
                //             detailRow.style.display = 'none';
                //             this.textContent = 'Show';
                //         }
                //     });
                // });
            })
            .finally(() => {
                isLoading = false;
            });

        batch++;
    }

    window.addEventListener('scroll', () => {
        if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight) {
            loadBooks();
        }
    });

    document.getElementById('settings-form').addEventListener('change', () => {
        document.querySelector('#books-table tbody').innerHTML = '';
        batch = 0;
        loadBooks();
    });

    document.getElementById('books-table').addEventListener('click', function (event) {
        const button = event.target;
        if (button.classList.contains('toggle-details')) {
            const index = button.dataset.index;
            const detailRow = document.querySelector(`.book-details[parent-index="${index}"]`);
            if (detailRow.style.display === 'none') {
                detailRow.style.display = '';
                button.textContent = 'Hide';
            } else {
                detailRow.style.display = 'none';
                button.textContent = 'Show';
            }
        }
    });

    loadBooks();
</script>